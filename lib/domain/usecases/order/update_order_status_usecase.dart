import 'package:nalogistics_app/data/models/order/update_status_response_model.dart';
import 'package:nalogistics_app/data/repositories/interfaces/i_order_repository.dart';
import 'package:nalogistics_app/core/exceptions/app_exception.dart';
import 'package:nalogistics_app/shared/enums/order_status_enum.dart';

class UpdateOrderStatusUseCase {
  final IOrderRepository _orderRepository;

  UpdateOrderStatusUseCase(this._orderRepository);

  Future<UpdatedOrderData> execute({
    required String orderID,
    required OrderStatus newStatus,
  }) async {
    try {
      if (orderID.isEmpty) {
        throw AppException('Order ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      print('üîÑ Updating order $orderID to status: ${newStatus.displayName}');

      final response = await _orderRepository.updateOrderStatus(
        orderID: orderID,
        statusValue: newStatus.value,
      );

      if (!response.isSuccess) {
        throw AppException(response.message.isNotEmpty
            ? response.message
            : 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng');
      }

      if (response.data == null) {
        throw AppException('D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá');
      }

      print('‚úÖ Order status updated successfully');
      return response.data!;
    } catch (e) {
      print('‚ùå UpdateOrderStatusUseCase Error: $e');
      rethrow;
    }
  }
}