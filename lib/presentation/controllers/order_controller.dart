import 'package:flutter/material.dart';
import 'package:nalogistics_app/core/base/base_controller.dart';
import 'package:nalogistics_app/data/models/order/order_api_model.dart';
import 'package:nalogistics_app/data/repositories/implementations/order_repository.dart';
import 'package:nalogistics_app/domain/usecases/order/get_orders_usecase.dart';
import 'package:nalogistics_app/shared/enums/order_status_enum.dart';

class OrderController extends BaseController {
  late final GetOrdersUseCase _getOrdersUseCase;
  late final OrderRepository _orderRepository;

  // ‚≠ê CH·ªà 4 STATUS C·∫¶N HI·ªÇN TH·ªã
  static const List<OrderStatus> activeStatuses = [
    OrderStatus.inProgress,
    OrderStatus.pickedUp,
    OrderStatus.inTransit,
    OrderStatus.delivered,
  ];

  // Order data by status
  Map<OrderStatus, List<OrderApiModel>> _ordersByStatus = {};
  Map<OrderStatus, bool> _loadingByStatus = {};
  Map<OrderStatus, String?> _errorByStatus = {};

  // Pagination tracking
  Map<OrderStatus, int> _currentPageByStatus = {};
  Map<OrderStatus, bool> _hasMoreByStatus = {};

  // Flag ƒë·ªÉ check ƒë√£ load initial data ch∆∞a
  bool _initialDataLoaded = false;

  // Getters
  Map<OrderStatus, List<OrderApiModel>> get ordersByStatus => _ordersByStatus;
  Map<OrderStatus, bool> get loadingByStatus => _loadingByStatus;
  Map<OrderStatus, String?> get errorByStatus => _errorByStatus;
  bool get initialDataLoaded => _initialDataLoaded;

  OrderController() {
    _orderRepository = OrderRepository();
    _getOrdersUseCase = GetOrdersUseCase(_orderRepository);
    _initializeData();
  }

  void _initializeData() {
    // ‚≠ê CH·ªà KH·ªûI T·∫†O CHO 4 STATUS
    for (var status in activeStatuses) {
      _ordersByStatus[status] = [];
      _loadingByStatus[status] = false;
      _errorByStatus[status] = null;
      _currentPageByStatus[status] = 1;
      _hasMoreByStatus[status] = true;
    }
  }

  // ‚≠ê LOAD T·∫§T C·∫¢ 4 TABS NGAY T·ª™ ƒê·∫¶U
  Future<void> loadInitialData() async {
    if (_initialDataLoaded) return;

    try {
      setLoading(true);

      // Set loading cho t·∫•t c·∫£ 4 status
      for (var status in activeStatuses) {
        _loadingByStatus[status] = true;
      }
      notifyListeners();

      print('üîÑ Loading initial data for all 4 tabs...');

      // G·ªçi API l·∫•y T·∫§T C·∫¢ orders (kh√¥ng filter)
      final allOrders = await _getOrdersUseCase.execute(
        filterStatus: null,
        pageNumber: 1,
        pageSize: 100, // L·∫•y nhi·ªÅu ƒë·ªÉ c√≥ ƒë·ªß data
      );

      print('‚úÖ Received ${allOrders.length} orders from API');

      // ‚≠ê PH√ÇN LO·∫†I ORDERS CHO 4 TABS
      for (var status in activeStatuses) {
        _ordersByStatus[status] = allOrders
            .where((order) => order.status == status.value)
            .toList();

        print('   ${status.shortName}: ${_ordersByStatus[status]!.length} orders');
      }

      // Check xem c√≤n data kh√¥ng (cho pagination sau n√†y)
      if (allOrders.length < 100) {
        for (var status in activeStatuses) {
          _hasMoreByStatus[status] = false;
        }
      }

      _initialDataLoaded = true;

      // Clear loading cho t·∫•t c·∫£ status
      for (var status in activeStatuses) {
        _loadingByStatus[status] = false;
      }

      setLoading(false);
      notifyListeners();

      print('‚úÖ Initial data loaded successfully for all 4 tabs!');

    } catch (e) {
      print('‚ùå Load Initial Data Error: $e');

      for (var status in activeStatuses) {
        _loadingByStatus[status] = false;
        _errorByStatus[status] = e.toString();
      }

      setLoading(false);
      setError(e.toString());
      notifyListeners();
    }
  }

  // Load more orders for specific status (pagination)
  Future<void> loadMoreOrders(OrderStatus status) async {
    // Ch·ªâ load more cho 4 status ƒë∆∞·ª£c ph√©p
    if (!activeStatuses.contains(status)) return;

    if (_loadingByStatus[status] == true) return;
    if (_hasMoreByStatus[status] == false) return;

    try {
      _loadingByStatus[status] = true;
      notifyListeners();

      print('üìÑ Loading more for ${status.shortName}...');

      final newOrders = await _getOrdersUseCase.execute(
        filterStatus: status,
        pageNumber: _currentPageByStatus[status]! + 1,
        pageSize: 13,
      );

      _ordersByStatus[status]!.addAll(newOrders);
      _currentPageByStatus[status] = _currentPageByStatus[status]! + 1;

      // Check if has more
      if (newOrders.length < 13) {
        _hasMoreByStatus[status] = false;
      }

      _loadingByStatus[status] = false;
      notifyListeners();

    } catch (e) {
      print('‚ùå Load More Error: $e');
      _loadingByStatus[status] = false;
      _errorByStatus[status] = e.toString();
      notifyListeners();
    }
  }

  // Refresh orders for specific status
  Future<void> refreshOrders(OrderStatus status) async {
    // Ch·ªâ refresh cho 4 status ƒë∆∞·ª£c ph√©p
    if (!activeStatuses.contains(status)) return;

    try {
      _loadingByStatus[status] = true;
      _errorByStatus[status] = null;
      notifyListeners();

      print('üîÑ Refreshing ${status.shortName}...');

      final orders = await _getOrdersUseCase.execute(
        filterStatus: status,
        pageNumber: 1,
        pageSize: 13,
      );

      _ordersByStatus[status] = orders;
      _currentPageByStatus[status] = 1;
      _hasMoreByStatus[status] = orders.length >= 13;

      _loadingByStatus[status] = false;
      notifyListeners();

    } catch (e) {
      print('‚ùå Refresh Error: $e');
      _loadingByStatus[status] = false;
      _errorByStatus[status] = e.toString();
      notifyListeners();
    }
  }

  // Refresh t·∫•t c·∫£ 4 tabs
  Future<void> refreshAllTabs() async {
    _initialDataLoaded = false;
    await loadInitialData();
  }

  // Getters
  bool isLoadingForStatus(OrderStatus status) =>
      _loadingByStatus[status] ?? false;

  bool hasErrorForStatus(OrderStatus status) =>
      _errorByStatus[status] != null;

  String? getError(OrderStatus status) =>
      _errorByStatus[status];

  List<OrderApiModel> getOrders(OrderStatus status) =>
      _ordersByStatus[status] ?? [];

  bool hasMore(OrderStatus status) =>
      _hasMoreByStatus[status] ?? false;

  int getTotalOrdersCount() {
    return activeStatuses.fold(
      0,
          (sum, status) => sum + (_ordersByStatus[status]?.length ?? 0),
    );
  }

  int getOrdersCount(OrderStatus status) {
    return _ordersByStatus[status]?.length ?? 0;
  }

  void clearErrorForStatus(OrderStatus status) {
    _errorByStatus[status] = null;
    notifyListeners();
  }

  @override
  void dispose() {
    super.dispose();
  }
}